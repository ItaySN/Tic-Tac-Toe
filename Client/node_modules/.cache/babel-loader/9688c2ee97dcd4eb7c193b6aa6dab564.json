{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Itay\\\\Documents\\\\GitHub\\\\Tic-Tac-Toe\\\\Client\\\\src\\\\index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport WinnerModal from './modal.js';\n/*\r\n\r\n\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction Board (props) {\r\n  function renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={props.squares[i]}\r\n        onClick={() => props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {renderSquare(0)}\r\n          {renderSquare(1)}\r\n          {renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {renderSquare(3)}\r\n          {renderSquare(4)}\r\n          {renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {renderSquare(6)}\r\n          {renderSquare(7)}\r\n          {renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\nfunction Game() {\r\n  const [state, setState] = useState({\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null)\r\n        }\r\n      ],\r\n      stepNumber: 0,\r\n      xIsNext: true\r\n    });\r\n  \r\n\r\n  function handleClick(i) {\r\n    const history = state.history.slice(0, state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = state.xIsNext ? \"X\" : \"O\";\r\n    setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares\r\n        }\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !state.xIsNext\r\n    });\r\n  }\r\n\r\n  function jumpTo(step) {\r\n    setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0,\r\n      history: state.history\r\n    });\r\n  }\r\n  const history = state.history;\r\n  const current = history[state.stepNumber];\r\n  const winner = calculateWinner(current.squares);\r\n\r\n  const moves = history.map((step, move) => {\r\n    const desc = move ?\r\n      'Go to move #' + move :\r\n      'Go to game start';\r\n    return (\r\n      <li key={move}>\r\n        <button onClick={() => jumpTo(move)}>{desc}</button>\r\n      </li>\r\n    );\r\n  });\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n\r\n    } else {\r\n      status = \"Next player: \" + (state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={i => handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n        {winner && <WinnerModal/>}\r\n      </div>\r\n    );\r\n  \r\n}\r\n\r\n*/\n// ========================================\n\nReactDOM.render( /*#__PURE__*/React.createElement(Game, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 17\n  }\n}), document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["C:/Users/Itay/Documents/GitHub/Tic-Tac-Toe/Client/src/index.js"],"names":["React","useState","ReactDOM","WinnerModal","render","document","getElementById","calculateWinner","squares","lines","i","length","a","b","c"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,WAAP,MAAwB,YAAxB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4HA;;AAEAD,QAAQ,CAACE,MAAT,eAAgB,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAA0BC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA1B;;AAGA,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AAChC,QAAMC,KAAK,GAAG,CACZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADY,EAEZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFY,EAGZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHY,EAIZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJY,EAKZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALY,EAMZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANY,EAOZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAPY,EAQZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CARY,CAAd;;AAUA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,UAAM,CAACE,CAAD,EAAIC,CAAJ,EAAOC,CAAP,IAAYL,KAAK,CAACC,CAAD,CAAvB;;AACA,QAAIF,OAAO,CAACI,CAAD,CAAP,IAAcJ,OAAO,CAACI,CAAD,CAAP,KAAeJ,OAAO,CAACK,CAAD,CAApC,IAA2CL,OAAO,CAACI,CAAD,CAAP,KAAeJ,OAAO,CAACM,CAAD,CAArE,EAA0E;AACxE,aAAON,OAAO,CAACI,CAAD,CAAd;AACD;AACF;;AACD,SAAO,IAAP;AACD","sourcesContent":["\r\nimport React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport WinnerModal from './modal.js'\r\n\r\n/*\r\n\r\n\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction Board (props) {\r\n  function renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={props.squares[i]}\r\n        onClick={() => props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {renderSquare(0)}\r\n          {renderSquare(1)}\r\n          {renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {renderSquare(3)}\r\n          {renderSquare(4)}\r\n          {renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {renderSquare(6)}\r\n          {renderSquare(7)}\r\n          {renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\nfunction Game() {\r\n  const [state, setState] = useState({\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null)\r\n        }\r\n      ],\r\n      stepNumber: 0,\r\n      xIsNext: true\r\n    });\r\n  \r\n\r\n  function handleClick(i) {\r\n    const history = state.history.slice(0, state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = state.xIsNext ? \"X\" : \"O\";\r\n    setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares\r\n        }\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !state.xIsNext\r\n    });\r\n  }\r\n\r\n  function jumpTo(step) {\r\n    setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0,\r\n      history: state.history\r\n    });\r\n  }\r\n  const history = state.history;\r\n  const current = history[state.stepNumber];\r\n  const winner = calculateWinner(current.squares);\r\n\r\n  const moves = history.map((step, move) => {\r\n    const desc = move ?\r\n      'Go to move #' + move :\r\n      'Go to game start';\r\n    return (\r\n      <li key={move}>\r\n        <button onClick={() => jumpTo(move)}>{desc}</button>\r\n      </li>\r\n    );\r\n  });\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n\r\n    } else {\r\n      status = \"Next player: \" + (state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={i => handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n        {winner && <WinnerModal/>}\r\n      </div>\r\n    );\r\n  \r\n}\r\n\r\n*/\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}"]},"metadata":{},"sourceType":"module"}